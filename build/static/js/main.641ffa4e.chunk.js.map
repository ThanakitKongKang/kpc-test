{"version":3,"sources":["context/crud/constant.js","context/crud/reducer.js","context/crud/functions.js","context/crud/provider.js","components/HomePage.js","components/EditPage.js","App.js","serviceWorker.js","context/provider.js","index.js"],"names":["CrudConstant","CrudReducer","state","action","userList","JSON","parse","localStorage","getItem","type","push","data","setItem","stringify","forceUpdate","length","removeItem","updatedDataSource","i","key","title","fname","lname","fullname","birthday","nationality","gender","passport","expectedSalary","phone","citizenID","success","s","message","CrudFunctions","initialUserList","useReducer","country","dispatch","param","CrudContext","createContext","CrudProvider","children","addUser","updateUserList","getTableData","getDefaultUsers","updateUser","Provider","value","Option","Select","EmpForm","history","useHistory","useContext","useState","showError","citizenIDState","setCitizenIDState","showHelp","showSuccess","phoneInput","setPhoneInput","dataSource","setDataSource","selectedRowKeys","setSelectedRowKeys","Form","useForm","form","columns","dataIndex","render","text","record","onClick","onConfirm","handleDelete","handleValidate","values","validatePhoneNumber","undefined","isValidPhoneNumber","nextFocus","next","nextElementSibling","tagName","toLowerCase","focus","handleInputCitizen","evt","target","srcElement","maxLength","parseInt","attributes","prev","previousElementSibling","prevFocus","name","handleInputCitizenCheck","keyCode","charCode","citizenLength","rowLen","inputs","map","index","tag","className","onChange","onKeyDownCapture","pattern","inputMode","style","width","margin","newDataSource","filter","item","useEffect","userForm","onFinish","citizenID0","citizenID1","citizenID2","citizenID3","citizenID4","String","Math","max","apply","u","Number","resetFields","scrollToFirstError","initialValues","onSubmitCapture","Item","label","hasFeedback","rules","required","showSearch","filterOption","input","option","indexOf","placeholder","nationalityData","n","validateStatus","help","Group","displayInitialValueAsLocalNumber","defaultCountry","limitMaxLength","thousandSeparator","suffix","justify","htmlType","rowSelection","hasSelected","Fragment","borderStyle","padding","borderRadius","disabled","row","icon","DeleteOutlined","danger","UsergroupAddOutlined","bordered","scroll","x","pagination","position","size","showSizeChanger","showQuickJumper","rowKey","EditPage","Moment","locale","id","useParams","currentUser","formInitialValues","initCitizenID","startAt","endAt","inputValue","slice","defaultValue","Content","Layout","Header","App","path","exact","HomePage","Boolean","window","location","hostname","match","AppContext","AppProvider","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.641ffa4e.chunk.js","sourcesContent":["export const CrudConstant = {\r\n    ADD_USER: \"ADD_USER\",\r\n    UPDATE_USER_LIST: \"UPDATE_USER_LIST\",\r\n    FORCE_UPDATE: \"FORCE_UPDATE\",\r\n    UPDATE_USER: \"UPDATE_USER\",\r\n}","import { CrudConstant } from './constant';\r\n\r\nexport const CrudReducer = (state = {}, action) => {\r\n    let userList = JSON.parse(localStorage.getItem(\"userList\"));\r\n\r\n    switch (action.type) {\r\n        case CrudConstant.ADD_USER:\r\n            userList.push(action.data)\r\n            localStorage.setItem(\"userList\", JSON.stringify(userList))\r\n            return {\r\n                ...state,\r\n                forceUpdate: !state.forceUpdate,\r\n            };\r\n        case CrudConstant.UPDATE_USER_LIST:\r\n            action.data.length === 0 ? localStorage.removeItem(\"userList\") : localStorage.setItem(\"userList\", JSON.stringify(action.data))\r\n            return {\r\n                ...state,\r\n            }\r\n        case CrudConstant.UPDATE_USER:\r\n            let updatedDataSource = [...userList];\r\n\r\n            for (let i in updatedDataSource) {\r\n                if (updatedDataSource[i].key == action.data.key) {\r\n                    updatedDataSource[i].title = action.data.title ? action.data.title : null;\r\n                    updatedDataSource[i].fname = action.data.fname ? action.data.fname : null;\r\n                    updatedDataSource[i].lname = action.data.lname ? action.data.lname : null;\r\n                    updatedDataSource[i].fullname = action.data.fname && action.data.lname ? `${action.data.fname} ${action.data.lname}` : null;\r\n                    updatedDataSource[i].birthday = action.data.birthday ? action.data.birthday : null;\r\n                    updatedDataSource[i].nationality = action.data.nationality ? action.data.nationality : null;\r\n                    updatedDataSource[i].gender = action.data.gender ? action.data.gender : null;\r\n                    updatedDataSource[i].passport = action.data.passport ? action.data.passport : null;\r\n                    updatedDataSource[i].expectedSalary = action.data.expectedSalary ? action.data.expectedSalary : null;\r\n                    updatedDataSource[i].phone = action.data.phone ? action.data.phone : null;\r\n                    updatedDataSource[i].citizenID = action.data.citizenID ? action.data.citizenID : null;\r\n                    break;\r\n                }\r\n            }\r\n            localStorage.setItem(\"userList\", JSON.stringify(updatedDataSource))\r\n            return {\r\n                ...state,\r\n            }\r\n        case CrudConstant.FORCE_UPDATE:\r\n            return {\r\n                ...state,\r\n                forceUpdate: !state.forceUpdate,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};","import React, { useReducer } from 'react';\r\nimport { CrudConstant } from './constant';\r\nimport { CrudReducer } from './reducer';\r\nimport { message } from 'antd'\r\n\r\nconst success = (s) => {\r\n    message.success(s);\r\n};\r\n\r\nconst useDefineRestAPIFunctions = () => {\r\n    const initialObject = {\r\n        forceUpdate: false,\r\n        country: null,\r\n    };\r\n\r\n    const initialUserList = [{\r\n        key: \"0\",\r\n        title: null,\r\n        fname: \"Ratvadee\",\r\n        lname: \"Sagarik\",\r\n        fullname: \"Ratvadee Sagarik\",\r\n        birthday: null,\r\n        nationality: \"Thai\",\r\n        citizenID: null,\r\n        gender: \"Female\",\r\n        phone: \"+66879862511\",\r\n        passport: null,\r\n        expectedSalary: null,\r\n    },\r\n    {\r\n        key: \"1\",\r\n        title: null,\r\n        fname: \"Kangsadan\",\r\n        lname: \"Poosee\",\r\n        fullname: \"Kangsadan Poosee\",\r\n        birthday: null,\r\n        nationality: \"Thai\",\r\n        citizenID: null,\r\n        gender: \"Female\",\r\n        phone: \"+66827774997\",\r\n        passport: null,\r\n        expectedSalary: null,\r\n    },\r\n    {\r\n        key: \"2\",\r\n        title: null,\r\n        fname: \"Risa\",\r\n        lname: \"Pansakul\",\r\n        fullname: \"Risa Pansakul\",\r\n        birthday: null,\r\n        nationality: \"Thai\",\r\n        citizenID: null,\r\n        gender: \"Female\",\r\n        phone: \"+66819956782\",\r\n        passport: null,\r\n        expectedSalary: null,\r\n    },\r\n    {\r\n        key: \"3\",\r\n        title: null,\r\n        fname: \"Sawi\",\r\n        lname: \"Tri\",\r\n        fullname: \"Sawi Tri\",\r\n        birthday: null,\r\n        nationality: \"American\",\r\n        citizenID: null,\r\n        gender: \"Female\",\r\n        phone: \"+66720779988\",\r\n        passport: null,\r\n        expectedSalary: null,\r\n    },\r\n    {\r\n        key: \"4\",\r\n        title: null,\r\n        fname: \"Attapon\",\r\n        lname: \"Sagarik\",\r\n        fullname: \"Attapon Sagarik\",\r\n        birthday: null,\r\n        nationality: \"Thai\",\r\n        citizenID: null,\r\n        gender: \"Male\",\r\n        phone: \"+66939077930\",\r\n        passport: null,\r\n        expectedSalary: null,\r\n    },]\r\n\r\n    const [state, dispatch] = useReducer(CrudReducer, initialObject)\r\n    const addUser = (param) => {\r\n        dispatch({\r\n            type: CrudConstant.ADD_USER,\r\n            data: param,\r\n        })\r\n        success(\"Added user successfully\");\r\n    }\r\n    const updateUser = param => {\r\n        dispatch({\r\n            type: CrudConstant.UPDATE_USER,\r\n            data: param,\r\n        })\r\n        success(\"Updated user successfully\");\r\n    }\r\n    const updateUserList = (param) => {\r\n        dispatch({\r\n            type: CrudConstant.UPDATE_USER_LIST,\r\n            data: param,\r\n        })\r\n    }\r\n\r\n    const getTableData = () => {\r\n        let userList = localStorage.getItem(\"userList\");\r\n        if (userList == null || userList.length === 0) {\r\n            localStorage.setItem(\"userList\", JSON.stringify(initialUserList))\r\n            return initialUserList;\r\n        } else {\r\n            return JSON.parse(userList);\r\n        }\r\n    }\r\n\r\n    const getDefaultUsers = () => {\r\n        localStorage.setItem(\"userList\", JSON.stringify(initialUserList))\r\n        dispatch({\r\n            type: CrudConstant.FORCE_UPDATE,\r\n        })\r\n    }\r\n\r\n    return [\r\n        state,\r\n        dispatch,\r\n        addUser,\r\n        updateUserList,\r\n        getTableData,\r\n        getDefaultUsers,\r\n        updateUser,\r\n    ];\r\n};\r\n\r\nexport const CrudFunctions = {\r\n    useDefineRestAPIFunctions,\r\n}","import React, { createContext } from 'react';\r\nimport { CrudFunctions } from './functions';\r\n\r\nconst CrudContext = createContext();\r\nconst CrudProvider = ({ children }) => {\r\n    const [\r\n        state,\r\n        dispatch,\r\n        addUser,\r\n        updateUserList,\r\n        getTableData,\r\n        getDefaultUsers,\r\n        updateUser\r\n    ] = CrudFunctions.useDefineRestAPIFunctions();\r\n\r\n    return (\r\n        <CrudContext.Provider\r\n            value={{\r\n                ...state,\r\n                dispatch,\r\n                addUser,\r\n                updateUserList,\r\n                getTableData,\r\n                getDefaultUsers,\r\n                updateUser\r\n            }}\r\n        >\r\n            {children}\r\n        </CrudContext.Provider>\r\n    );\r\n};\r\n\r\nexport { CrudContext, CrudProvider }\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport { useHistory } from 'react-router-dom'\r\nimport {\r\n    Form,\r\n    Input,\r\n    Select,\r\n    Row,\r\n    Col,\r\n    Button,\r\n    DatePicker,\r\n    Radio,\r\n    Table,\r\n    Popconfirm,\r\n    Space,\r\n} from 'antd';\r\nimport { DeleteOutlined, UsergroupAddOutlined } from '@ant-design/icons';\r\nimport { CrudContext } from '../context/crud';\r\nimport nationalityData from \"../nationality.json\";\r\nimport NumberFormat from 'react-number-format';\r\nimport PhoneInput, { isValidPhoneNumber } from 'react-phone-number-input'\r\nimport 'react-phone-number-input/style.css';\r\n\r\nconst { Option } = Select;\r\n\r\nconst EmpForm = () => {\r\n    const history = useHistory();\r\n    const state = useContext(CrudContext);\r\n    const { addUser, updateUserList, getTableData, getDefaultUsers, forceUpdate } = state;\r\n\r\n    const [citizenIDState, setCitizenIDState] = useState({\r\n        showError: null,\r\n    });\r\n    const [phoneInput, setPhoneInput] = useState({\r\n        showError: null,\r\n        showHelp: null,\r\n        showSuccess: null,\r\n        value: null,\r\n    });\r\n    const [dataSource, setDataSource] = useState();\r\n    const [selectedRowKeys, setSelectedRowKeys] = useState([]);\r\n    const [form] = Form.useForm();\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'fullname',\r\n            key: 'fullname',\r\n        },\r\n        {\r\n            title: 'Gender',\r\n            dataIndex: 'gender',\r\n            key: 'gender',\r\n        },\r\n        {\r\n            title: 'Mobile Phone',\r\n            dataIndex: 'phone',\r\n            key: 'phone',\r\n        },\r\n        {\r\n            title: 'Nationality',\r\n            dataIndex: 'nationality',\r\n            key: 'nationality',\r\n        },\r\n        {\r\n            title: 'Action',\r\n            dataIndex: '',\r\n            key: 'x',\r\n            render: (text, record) => <div>\r\n                <Button type=\"link\" onClick={() => history.push(`/edit/${record.key}`)}>Edit</Button>/\r\n             <Popconfirm title=\"Sure to delete?\" onConfirm={() => handleDelete(record.key)}>\r\n                    <Button type=\"link\">Delete</Button>\r\n                </Popconfirm>\r\n\r\n            </div>,\r\n\r\n        },\r\n    ];\r\n\r\n    const tableConfig = {\r\n        bordered: true,\r\n        scroll: { x: '90vw' },\r\n        pagination: {\r\n            position: [\"topRight\"],\r\n            size: \"small\",\r\n            showSizeChanger: true,\r\n            showQuickJumper: true\r\n        },\r\n        rowKey: (record) => {\r\n            return `${record.key}`;\r\n        }\r\n    }\r\n\r\n    const onSelectChange = selectedRowKeys => {\r\n        setSelectedRowKeys(selectedRowKeys)\r\n    };\r\n\r\n    const onFinish = values => {\r\n        values.citizenID =\r\n            citizenIDState.citizenID0 +\r\n            citizenIDState.citizenID1 +\r\n            citizenIDState.citizenID2 +\r\n            citizenIDState.citizenID3 +\r\n            citizenIDState.citizenID4;\r\n        values.phone = phoneInput.value;\r\n        values.fullname = `${values.fname} ${values.lname}`;\r\n        if (handleValidate(values) && !phoneInput.showError) {\r\n            let userList = JSON.parse(localStorage.getItem(\"userList\"));\r\n            if (userList.length > 0) {\r\n                values.key = String(Math.max.apply(Math, userList.map((u) => { return Number(u.key) + 1; })));\r\n            } else if (userList.length === 0 || userList === undefined) {\r\n                values.key = \"0\"\r\n            }\r\n            addUser(values)\r\n            form.resetFields();\r\n            setCitizenIDState({\r\n                showError: null,\r\n            });\r\n            setPhoneInput({\r\n                showError: null,\r\n                showHelp: null,\r\n                showSuccess: null,\r\n                value: null,\r\n            })\r\n        }\r\n    };\r\n\r\n    const handleValidate = (values) => {\r\n        validatePhoneNumber();\r\n        const length = values.citizenID.length;\r\n        if (length > 0 && length !== 13) {\r\n            setCitizenIDState({\r\n                ...citizenIDState,\r\n                showError: true,\r\n            })\r\n            return false;\r\n        } else if (length === 0 || length === undefined) {\r\n            setCitizenIDState({\r\n                ...citizenIDState,\r\n                showError: false,\r\n            })\r\n            // delete values.citizenID\r\n            values.citizenID = \"\"\r\n\r\n        } else if (length === 13) {\r\n            setCitizenIDState({\r\n                ...citizenIDState,\r\n                showError: false,\r\n            })\r\n\r\n        }\r\n        return true;\r\n    }\r\n\r\n    const validatePhoneNumber = () => {\r\n        if (phoneInput.value) {\r\n            if (isValidPhoneNumber(phoneInput.value)) {\r\n                setPhoneInput({\r\n                    ...phoneInput,\r\n                    showError: false,\r\n                    showHelp: null,\r\n                    showSuccess: true,\r\n                })\r\n            }\r\n            else {\r\n                setPhoneInput({\r\n                    ...phoneInput,\r\n                    showError: true,\r\n                    showHelp: \"Invalid phone number\",\r\n                    showSuccess: false,\r\n                })\r\n\r\n            }\r\n        } else {\r\n            setPhoneInput({\r\n                ...phoneInput,\r\n                showError: true,\r\n                showHelp: \"Phone number required\",\r\n                showSuccess: false,\r\n            })\r\n        }\r\n    }\r\n\r\n    const nextFocus = next => {\r\n        while ((next = next.nextElementSibling)) {\r\n            if (next == null) break;\r\n            if (next.tagName.toLowerCase() === \"input\") {\r\n                next.focus();\r\n                break;\r\n            }\r\n        }\r\n    };\r\n\r\n    const prevFocus = prev => {\r\n        while ((prev = prev.previousElementSibling)) {\r\n            if (prev == null) break;\r\n            if (prev.tagName.toLowerCase() === \"input\") {\r\n                prev.focus();\r\n                break;\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleInputCitizen = evt => {\r\n        let target = evt.srcElement || evt.target;\r\n        let maxLength = parseInt(target.attributes[\"maxLength\"].value, 10);\r\n        let length = target.value.length;\r\n        if (length === maxLength) {\r\n            nextFocus(target);\r\n        }\r\n        // Move to previous field if empty (user pressed backspace)\r\n        else if (length === 0) {\r\n            prevFocus(target);\r\n        }\r\n        setCitizenIDState({\r\n            ...citizenIDState,\r\n            [target.name]: target.value ? target.value : null,\r\n        });\r\n    };\r\n\r\n    const handleInputCitizenCheck = evt => {\r\n        let target = evt.srcElement || evt.target;\r\n        let maxLength = parseInt(target.attributes[\"maxLength\"].value, 10);\r\n        let length = target.value.length;\r\n        const key = evt.keyCode || evt.charCode;\r\n        if (key === 8 || key === 46) return false;\r\n        if (length === maxLength) {\r\n            nextFocus(target);\r\n        }\r\n    };\r\n    const citizenLength = [1, 4, 5, 2, 1];\r\n    const rowLen = citizenLength.length;\r\n    const inputs = [];\r\n    citizenLength.map((value, index) => {\r\n        const tag = (\r\n            <Input\r\n                className=\"inputCitizen\"\r\n                key={index}\r\n                name={`citizenID${index}`}\r\n                onChange={handleInputCitizen}\r\n                onKeyDownCapture={handleInputCitizenCheck}\r\n                type=\"text\"\r\n                pattern={`[0-9]{${value}}`}\r\n                inputMode=\"numeric\"\r\n                maxLength={`${value}`}\r\n                style={{\r\n                    width: `${10 + (value - 1) * 2.5}%`,\r\n                }}\r\n            />\r\n        );\r\n        inputs.push(tag);\r\n\r\n        if (rowLen !== index + 1) {\r\n            inputs.push(\r\n                <span key={`after_${index}`} style={{ margin: \"0.25rem 0.3rem\" }}>\r\n                    -\r\n    </span>\r\n            );\r\n        }\r\n        return true;\r\n    });\r\n\r\n    const handleMultipleDelete = () => {\r\n        const dataSource = getTableData();\r\n        let updatedDataSource = [...selectedRowKeys];\r\n        updatedDataSource = dataSource.filter(row => {\r\n            return updatedDataSource.indexOf(row.key) < 0;\r\n        },\r\n            updatedDataSource\r\n        );\r\n        setDataSource(updatedDataSource)\r\n        updateUserList(updatedDataSource)\r\n        setSelectedRowKeys([])\r\n    }\r\n\r\n    const handleDelete = key => {\r\n        const dataSource = getTableData();\r\n        const newDataSource = dataSource.filter(item => item.key !== key);\r\n        setDataSource(newDataSource)\r\n        updateUserList(newDataSource)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setDataSource(getTableData())\r\n    }, [forceUpdate])\r\n\r\n    const userForm = <Form\r\n        form={form}\r\n        name=\"register\"\r\n        onFinish={onFinish}\r\n        scrollToFirstError\r\n        initialValues={{\r\n            title: \"Mr\"\r\n        }}\r\n        onSubmitCapture={validatePhoneNumber}\r\n    >\r\n        <Row>\r\n            <Space>\r\n                <Col>\r\n                    <Form.Item\r\n                        name=\"title\"\r\n                        label=\"Title\"\r\n                    >\r\n                        <Select style={{ width: 70 }}>\r\n                            <Option value=\"Mr\">Mr.</Option>\r\n                            <Option value=\"Mrs\">Mrs.</Option>\r\n                            <Option value=\"Miss\">Miss</Option>\r\n                        </Select>\r\n                    </Form.Item>\r\n                </Col>\r\n                <Col>\r\n                    <Form.Item\r\n                        hasFeedback\r\n                        name=\"fname\"\r\n                        label=\"Firstname\"\r\n                        rules={[{ required: true, message: 'Firstname required' },\r\n                        {\r\n                            pattern: /^\\S+$/,\r\n                            message: `Firstname not valid`\r\n                        }\r\n                        ]}\r\n\r\n                    >\r\n                        <Input />\r\n                    </Form.Item>\r\n                </Col>\r\n                <Col>\r\n                    <Form.Item\r\n                        hasFeedback\r\n                        name=\"lname\"\r\n                        label=\"Lastname\"\r\n                        rules={[\r\n                            { required: true, message: 'Lastname required' },\r\n                            {\r\n                                pattern: /^\\S+$/,\r\n                                message: `Lastname not valid`\r\n                            }]}\r\n                    >\r\n                        <Input />\r\n                    </Form.Item>\r\n                </Col>\r\n            </Space>\r\n        </Row>\r\n        <Row>\r\n            <Space>\r\n                <Col>\r\n                    <Form.Item name=\"birthday\" label=\"Birth Day\" hasFeedback\r\n                        rules={[{ type: 'object', required: true, message: 'Birthday required' }]}\r\n                    >\r\n                        <DatePicker />\r\n                    </Form.Item>\r\n                </Col>\r\n                <Col>\r\n                    <Form.Item name=\"nationality\" label=\"Nationality\"\r\n                    >\r\n                        <Select style={{ width: 300 }}\r\n                            showSearch\r\n                            filterOption={(input, option) =>\r\n                                option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                            }\r\n                            placeholder=\"-- Please Select --\"\r\n                        >\r\n                            {nationalityData.nationality.map((n, i) => {\r\n                                return <Option key={i} value={n}>{n}</Option>;\r\n                            })}\r\n                        </Select>\r\n                    </Form.Item>\r\n                </Col>\r\n            </Space>\r\n        </Row>\r\n\r\n        <Row>\r\n            <Form.Item\r\n                label=\"Citizen ID\"\r\n                name=\"citizenID\"\r\n                validateStatus={citizenIDState.showError ? \"error\" : null}\r\n                help={citizenIDState.showError ? \"Citizen ID is not VALID\" : null}\r\n            >\r\n                <Row>\r\n                    {inputs}\r\n                </Row>\r\n            </Form.Item>\r\n        </Row>\r\n        <Row>\r\n            <Col>\r\n                <Form.Item name=\"gender\" label=\"Gender\">\r\n                    <Radio.Group>\r\n                        <Radio value=\"Male\">Male</Radio>\r\n                        <Radio value=\"Female\">Female</Radio>\r\n                        <Radio value=\"Unisex\">Unisex</Radio>\r\n                    </Radio.Group>\r\n                </Form.Item>\r\n            </Col>\r\n        </Row>\r\n        <Row>\r\n            <Col>\r\n                <Form.Item\r\n                    label=\"Mobile Phone\"\r\n                    // shouldUpdate={false}\r\n                    hasFeedback\r\n                    rules={[{ required: true, message: 'Please input your mobile phone!' }]}\r\n                    validateStatus={phoneInput.showError ? \"error\" : phoneInput.showSuccess ? \"success\" : null}\r\n                    help={phoneInput.showHelp ? phoneInput.showHelp : null}\r\n                >\r\n                    <PhoneInput\r\n                        displayInitialValueAsLocalNumber\r\n                        defaultCountry=\"TH\"\r\n                        placeholder=\"Enter phone number\"\r\n                        limitMaxLength\r\n                        value={phoneInput.value}\r\n                        onChange={(value) => setPhoneInput({\r\n                            ...phoneInput,\r\n                            value: value,\r\n                            showError: false,\r\n                            showHelp: null,\r\n                        })}\r\n                    />\r\n                </Form.Item>\r\n\r\n            </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n            <Col>\r\n                <Form.Item label=\"Passport NO\" name=\"passport\"\r\n                    rules={[\r\n                        {\r\n                            pattern: /^[A-Z][0-9]{8}$/,\r\n                            message: `Passport is not valid! (e.g. A12345678)`\r\n                        }\r\n                    ]}\r\n                >\r\n                    <Input\r\n                        type=\"text\"\r\n                        maxLength=\"9\"\r\n                    />\r\n                </Form.Item>\r\n            </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n            <Col>\r\n                <Form.Item name=\"expectedSalary\" label=\"Expected Salary\" hasFeedback rules={[{ required: true, message: 'Expected salary required' }]}>\r\n                    <NumberFormat thousandSeparator={true} suffix={'฿'} className=\"ant-input\" />\r\n                </Form.Item>\r\n            </Col>\r\n        </Row>\r\n\r\n        <Row justify=\"end\">\r\n            <Form.Item>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                    Register\r\n</Button>\r\n            </Form.Item>\r\n        </Row>\r\n    </Form >\r\n\r\n    const rowSelection = {\r\n        selectedRowKeys,\r\n        onChange: onSelectChange,\r\n    };\r\n\r\n    const hasSelected = selectedRowKeys.length > 0;\r\n    return (\r\n        <React.Fragment>\r\n            <Row justify=\"center\">\r\n                <Col style={{ borderStyle: \"ridge\", padding: \"2rem 3rem\", borderRadius: \"0.5rem\", margin: \"2rem 0\" }}>{userForm}</Col>\r\n            </Row >\r\n            <Space>\r\n                <Button type=\"primary\"\r\n                    disabled={!hasSelected}\r\n                    onClick={handleMultipleDelete}\r\n                    icon={<DeleteOutlined />}\r\n                    danger\r\n                >\r\n                    Delete ({selectedRowKeys.length})\r\n                 </Button>\r\n                <Button\r\n                    type={dataSource?.length !== 5 ? \"primary\" : null}\r\n                    onClick={getDefaultUsers}\r\n                    icon={<UsergroupAddOutlined />}\r\n                >\r\n                    Default Users\r\n                </Button>\r\n            </Space>\r\n            <Row>\r\n                <Table\r\n                    style={{ width: \"100%\" }}\r\n                    {...tableConfig}\r\n                    rowSelection={rowSelection}\r\n                    dataSource={dataSource}\r\n                    columns={columns}\r\n                />\r\n            </Row>\r\n\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default EmpForm;","import React, { useState, useEffect, useContext } from 'react';\r\nimport Moment from 'moment';\r\nimport { useHistory, useParams } from 'react-router-dom'\r\nimport {\r\n    Form,\r\n    Input,\r\n    Select,\r\n    Row,\r\n    Col,\r\n    Button,\r\n    DatePicker,\r\n    Radio,\r\n    Space,\r\n} from 'antd';\r\nimport { CrudContext } from '../context/crud';\r\nimport nationalityData from \"../nationality.json\";\r\nimport NumberFormat from 'react-number-format';\r\nimport PhoneInput, { isValidPhoneNumber } from 'react-phone-number-input'\r\nimport 'react-phone-number-input/style.css';\r\n\r\nconst { Option } = Select;\r\n\r\nconst EditPage = () => {\r\n    Moment.locale('th')\r\n    const history = useHistory();\r\n    const state = useContext(CrudContext);\r\n    const { updateUser, getTableData } = state;\r\n    const { id } = useParams();\r\n\r\n    // initial values\r\n    const dataSource = getTableData();\r\n    const currentUser = dataSource.filter(item => item.key === id);\r\n\r\n    const formInitialValues = {\r\n        title: currentUser[0].title ? currentUser[0].title : \"Mr\",\r\n        fname: currentUser[0].fname ? currentUser[0].fname : null,\r\n        lname: currentUser[0].lname ? currentUser[0].lname : null,\r\n        birthday: currentUser[0].birthday ? Moment(currentUser[0].birthday) : null,\r\n        nationality: currentUser[0].nationality ? currentUser[0].nationality : null,\r\n        gender: currentUser[0].gender ? currentUser[0].gender : null,\r\n        passport: currentUser[0].passport ? currentUser[0].passport : null,\r\n        expectedSalary: currentUser[0].expectedSalary ? currentUser[0].expectedSalary : null,\r\n        phone: currentUser[0].phone ? currentUser[0].phone : null,\r\n    }\r\n\r\n    const [citizenIDState, setCitizenIDState] = useState({\r\n        showError: null,\r\n    });\r\n\r\n    const [phoneInput, setPhoneInput] = useState({\r\n        showError: null,\r\n        showHelp: null,\r\n        showSuccess: null,\r\n        value: currentUser[0].phone,\r\n    });\r\n    const [form] = Form.useForm();\r\n    const onFinish = values => {\r\n        values.citizenID =\r\n            citizenIDState.citizenID0 +\r\n            citizenIDState.citizenID1 +\r\n            citizenIDState.citizenID2 +\r\n            citizenIDState.citizenID3 +\r\n            citizenIDState.citizenID4;\r\n        values.phone = phoneInput.value;\r\n        values.fullname = `${values.fname} ${values.lname}`;\r\n        if (handleValidate(values) && !phoneInput.showError) {\r\n            values.key = id;\r\n            updateUser(values)\r\n            history.push('/')\r\n        }\r\n    };\r\n\r\n    const handleValidate = (values) => {\r\n        validatePhoneNumber();\r\n        const length = values.citizenID.length;\r\n        if (length > 0 && length !== 13) {\r\n            setCitizenIDState({\r\n                ...citizenIDState,\r\n                showError: true,\r\n            })\r\n            return false;\r\n        } else if (length === 0 || length === undefined) {\r\n            setCitizenIDState({\r\n                ...citizenIDState,\r\n                showError: false,\r\n            })\r\n            // delete values.citizenID\r\n            values.citizenID = \"\"\r\n\r\n        } else if (length === 13) {\r\n            setCitizenIDState({\r\n                ...citizenIDState,\r\n                showError: false,\r\n            })\r\n\r\n        }\r\n        return true;\r\n    }\r\n\r\n    const validatePhoneNumber = () => {\r\n        if (phoneInput.value) {\r\n            if (isValidPhoneNumber(phoneInput.value)) {\r\n                setPhoneInput({\r\n                    ...phoneInput,\r\n                    showError: false,\r\n                    showHelp: null,\r\n                    showSuccess: true,\r\n                })\r\n            }\r\n            else {\r\n                setPhoneInput({\r\n                    ...phoneInput,\r\n                    showError: true,\r\n                    showHelp: \"Invalid phone number\",\r\n                    showSuccess: false,\r\n                })\r\n\r\n            }\r\n        } else {\r\n            setPhoneInput({\r\n                ...phoneInput,\r\n                showError: true,\r\n                showHelp: \"Phone number required\",\r\n                showSuccess: false,\r\n            })\r\n        }\r\n    }\r\n\r\n    const nextFocus = next => {\r\n        while ((next = next.nextElementSibling)) {\r\n            if (next == null) break;\r\n            if (next.tagName.toLowerCase() === \"input\") {\r\n                next.focus();\r\n                break;\r\n            }\r\n        }\r\n    };\r\n\r\n    const prevFocus = prev => {\r\n        while ((prev = prev.previousElementSibling)) {\r\n            if (prev == null) break;\r\n            if (prev.tagName.toLowerCase() === \"input\") {\r\n                prev.focus();\r\n                break;\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleInputCitizen = evt => {\r\n        let target = evt.srcElement || evt.target;\r\n        let maxLength = parseInt(target.attributes[\"maxLength\"].value, 10);\r\n        let length = target.value.length;\r\n\r\n        if (length === maxLength) {\r\n            nextFocus(target);\r\n        }\r\n\r\n        // Move to previous field if empty (user pressed backspace)\r\n        else if (length === 0) {\r\n            prevFocus(target);\r\n        }\r\n\r\n        setCitizenIDState({\r\n            ...citizenIDState,\r\n            [target.name]: target.value ? target.value : null,\r\n        });\r\n    };\r\n\r\n    const handleInputCitizenCheck = evt => {\r\n        let target = evt.srcElement || evt.target;\r\n        let maxLength = parseInt(target.attributes[\"maxLength\"].value, 10);\r\n        let length = target.value.length;\r\n        const key = evt.keyCode || evt.charCode;\r\n        if (key === 8 || key === 46) return false;\r\n        if (length === maxLength) {\r\n            nextFocus(target);\r\n        }\r\n    };\r\n    const citizenLength = [1, 4, 5, 2, 1];\r\n    const initCitizenID = currentUser[0].citizenID;\r\n    useEffect(() => {\r\n        let startAt, endAt = 0;\r\n        citizenLength.map((value, index) => {\r\n            endAt += value;\r\n            let inputValue = initCitizenID ? initCitizenID.slice(startAt, endAt) : null;\r\n            citizenIDState['citizenID' + index] = inputValue;\r\n            startAt = endAt;\r\n            return true;\r\n        });\r\n    }, [])\r\n    const rowLen = citizenLength.length;\r\n    const inputs = [];\r\n    let startAt, endAt = 0;\r\n    citizenLength.map((value, index) => {\r\n        endAt += value;\r\n        let inputValue = initCitizenID ? initCitizenID.slice(startAt, endAt) : null;\r\n        const tag = (\r\n            < Input\r\n                className=\"inputCitizen\"\r\n                key={index}\r\n                name={`citizenID${index}`}\r\n                onChange={handleInputCitizen}\r\n                onKeyDownCapture={handleInputCitizenCheck}\r\n                type=\"text\"\r\n                pattern={`[0-9]{${value}}`}\r\n                inputMode=\"numeric\"\r\n                maxLength={`${value}`}\r\n                defaultValue={inputValue}\r\n                style={{\r\n                    width: `${10 + (value - 1) * 2.5}%`,\r\n                }}\r\n            />\r\n        );\r\n        inputs.push(tag);\r\n\r\n        if (rowLen !== index + 1) {\r\n            inputs.push(\r\n                <span key={`after_${index}`} style={{ margin: \"0.25rem 0.3rem\" }}>\r\n                    -\r\n   </span>\r\n            );\r\n        }\r\n        startAt = endAt;\r\n        return true;\r\n    });\r\n\r\n    const cancel = () => {\r\n        history.push('/')\r\n    }\r\n    return (\r\n        <Row justify=\"center\">\r\n            <Col style={{ borderStyle: \"ridge\", padding: \"2rem 3rem\", borderRadius: \"0.5rem\", margin: \"2rem 0\" }}>\r\n\r\n                <Form\r\n                    form={form}\r\n                    name=\"register\"\r\n                    onFinish={onFinish}\r\n                    initialValues={\r\n                        formInitialValues\r\n                    }\r\n                    scrollToFirstError\r\n                    onSubmitCapture={validatePhoneNumber}\r\n                >\r\n                    <Row>\r\n                        <Space>\r\n                            <Col>\r\n                                <Form.Item\r\n                                    name=\"title\"\r\n                                    label=\"Title\"\r\n                                >\r\n                                    <Select style={{ width: 70 }}>\r\n                                        <Option value=\"Mr\">Mr.</Option>\r\n                                        <Option value=\"Mrs\">Mrs.</Option>\r\n                                        <Option value=\"Miss\">Miss</Option>\r\n                                    </Select>\r\n                                </Form.Item>\r\n                            </Col>\r\n                            <Col>\r\n                                <Form.Item\r\n                                    hasFeedback\r\n                                    name=\"fname\"\r\n                                    label=\"Firstname\"\r\n                                    rules={[{ required: true, message: 'Firstname required' },\r\n                                    {\r\n                                        pattern: /^\\S+$/,\r\n                                        message: `Firstname not valid`\r\n                                    }\r\n                                    ]}\r\n\r\n                                >\r\n                                    <Input />\r\n                                </Form.Item>\r\n                            </Col>\r\n                            <Col>\r\n                                <Form.Item\r\n                                    hasFeedback\r\n                                    name=\"lname\"\r\n                                    label=\"Lastname\"\r\n                                    rules={[\r\n                                        { required: true, message: 'Lastname required' },\r\n                                        {\r\n                                            pattern: /^\\S+$/,\r\n                                            message: `Lastname not valid`\r\n                                        }]}\r\n                                >\r\n                                    <Input />\r\n                                </Form.Item>\r\n                            </Col>\r\n                        </Space>\r\n                    </Row>\r\n                    <Row>\r\n                        <Space>\r\n                            <Col>\r\n                                <Form.Item name=\"birthday\" label=\"Birth Day\" hasFeedback\r\n                                    rules={[{ type: 'object', required: true, message: 'Birthday required' }]}\r\n                                >\r\n                                    <DatePicker />\r\n                                </Form.Item>\r\n                            </Col>\r\n                            <Col>\r\n                                <Form.Item name=\"nationality\" label=\"Nationality\"\r\n                                >\r\n                                    <Select style={{ width: 300 }}\r\n                                        showSearch\r\n                                        filterOption={(input, option) =>\r\n                                            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                        }\r\n                                        placeholder=\"-- Please Select --\"\r\n                                    >\r\n                                        {nationalityData.nationality.map((n, i) => {\r\n                                            return <Option key={i} value={n}>{n}</Option>;\r\n                                        })}\r\n                                    </Select>\r\n                                </Form.Item>\r\n                            </Col>\r\n                        </Space>\r\n                    </Row>\r\n\r\n                    <Row>\r\n\r\n                        <Form.Item\r\n                            label=\"Citizen ID\"\r\n                            name=\"citizenID\"\r\n                            validateStatus={citizenIDState.showError ? \"error\" : null}\r\n                            help={citizenIDState.showError ? \"Citizen ID is not VALID\" : null}\r\n                        >\r\n                            <Row>\r\n                                {inputs}\r\n                            </Row>\r\n                        </Form.Item>\r\n\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <Form.Item name=\"gender\" label=\"Gender\">\r\n                                <Radio.Group>\r\n                                    <Radio value=\"Male\">Male</Radio>\r\n                                    <Radio value=\"Female\">Female</Radio>\r\n                                    <Radio value=\"Unisex\">Unisex</Radio>\r\n                                </Radio.Group>\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <Form.Item\r\n                                label=\"Mobile Phone\"\r\n                                // shouldUpdate={false}\r\n                                hasFeedback\r\n                                rules={[{ required: true, message: 'Please input your mobile phone!' }]}\r\n                                validateStatus={phoneInput.showError ? \"error\" : phoneInput.showSuccess ? \"success\" : null}\r\n                                help={phoneInput.showHelp ? phoneInput.showHelp : null}\r\n                            >\r\n                                <PhoneInput\r\n                                    displayInitialValueAsLocalNumber\r\n                                    defaultCountry=\"TH\"\r\n                                    placeholder=\"Enter phone number\"\r\n                                    limitMaxLength\r\n                                    value={phoneInput.value}\r\n                                    onChange={(value) => setPhoneInput({\r\n                                        ...phoneInput,\r\n                                        value: value,\r\n                                        showError: false,\r\n                                        showHelp: null,\r\n                                    })}\r\n                                />\r\n                            </Form.Item>\r\n\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col>\r\n                            <Form.Item label=\"Passport NO\" name=\"passport\"\r\n                                rules={[\r\n                                    {\r\n                                        pattern: /^[A-Z][0-9]{8}$/,\r\n                                        message: `Passport is not valid! (e.g. A12345678)`\r\n                                    }\r\n                                ]}\r\n                            >\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    maxLength=\"9\"\r\n                                />\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col>\r\n                            <Form.Item name=\"expectedSalary\" label=\"Expected Salary\" hasFeedback rules={[{ required: true, message: 'Expected salary required' }]}>\r\n                                <NumberFormat thousandSeparator={true} suffix={'฿'} className=\"ant-input\" />\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row justify=\"end\">\r\n                        <Form.Item>\r\n                            <Space>\r\n                                <Button onClick={cancel}>\r\n                                    Cancel\r\n                    </Button>\r\n                                <Button type=\"primary\" htmlType=\"submit\">\r\n                                    Edit\r\n                    </Button>\r\n                            </Space>\r\n                        </Form.Item>\r\n                    </Row>\r\n                </Form >\r\n            </Col>\r\n        </Row >\r\n    );\r\n}\r\n\r\nexport default EditPage;","import React from 'react';\nimport './App.css';\nimport { Layout } from 'antd';\nimport HomePage from './components/HomePage'\nimport EditPage from './components/EditPage'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nconst { Content, Header } = Layout;\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path='/' exact >\n          <Layout>\n            <Content className=\"container\">\n              <HomePage />\n            </Content>\n          </Layout>\n        </Route>\n        <Route path='/edit/:id' >\n          <Layout>\n            <Content className=\"container\">\n              <EditPage />\n            </Content>\n          </Layout>\n        </Route>\n      </Switch>\n    </Router>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { createContext } from 'react';\r\nimport { CrudProvider } from './crud'\r\nexport const AppContext = createContext();\r\n\r\nconst AppProvider = ({ children }) => {\r\n    return (\r\n        <AppContext.Provider value={null}>\r\n            <CrudProvider>\r\n                {children}\r\n            </CrudProvider>\r\n        </AppContext.Provider>\r\n    )\r\n}\r\n\r\nexport { AppProvider };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { AppProvider } from './context';\n\nReactDOM.render(\n  <AppProvider>\n    <App />\n  </AppProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}